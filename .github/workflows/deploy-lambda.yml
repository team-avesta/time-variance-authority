name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Tests
        run: npm run test || echo "No tests specified"

      - name: Build TypeScript
        run: npm run build

      - name: Package Lambda
        run: |
          echo "Creating deployment package..."
          cd dist
          zip -r ../lambda.zip .
          cd ..
          zip -r lambda.zip node_modules/
          echo "Package size: $(ls -lh lambda.zip | awk '{print $5}')"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to Lambda
        id: deploy
        run: |
          echo "Starting deployment..."
          # Store the current version for potential rollback
          CURRENT_VERSION=$(aws lambda get-function --function-name time-variance-authority --query 'Configuration.Version' --output text)
          echo "Current function version: $CURRENT_VERSION"

          # Deploy new version
          aws lambda update-function-code \
            --function-name time-variance-authority \
            --zip-file fileb://lambda.zip

      - name: Verify Deployment
        run: |
          echo "Waiting for function update to complete..."
          sleep 10

          # Get function state and configuration
          FUNCTION_INFO=$(aws lambda get-function --function-name time-variance-authority)
          FUNCTION_STATE=$(echo $FUNCTION_INFO | jq -r '.Configuration.State')
          LAST_UPDATE=$(echo $FUNCTION_INFO | jq -r '.Configuration.LastModified')
          CODE_SIZE=$(echo $FUNCTION_INFO | jq -r '.Configuration.CodeSize')

          echo "Function State: $FUNCTION_STATE"
          echo "Last Updated: $LAST_UPDATE"
          echo "Code Size: $CODE_SIZE bytes"

          if [ "$FUNCTION_STATE" != "Active" ]; then
            echo "Error: Function is not in Active state"
            exit 1
          fi

      - name: Rollback on Failure
        if: failure()
        run: |
          if [[ -n "${{ env.current_version }}" ]]; then
            echo "Deployment failed, rolling back to version ${{ env.current_version }}"
            aws lambda update-function-code \
              --function-name time-variance-authority \
              --revision ${{ env.current_version }}
            
            # Verify rollback
            ROLLBACK_STATE=$(aws lambda get-function \
              --function-name time-variance-authority \
              --query 'Configuration.State' \
              --output text)
            
            echo "Rollback state: $ROLLBACK_STATE"
            if [ "$ROLLBACK_STATE" != "Active" ]; then
              echo "Error: Rollback failed, manual intervention required"
              exit 1
            fi
            echo "Rollback completed successfully"
          fi
